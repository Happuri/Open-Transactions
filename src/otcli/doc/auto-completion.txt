Description of auto completion

=== Introduction ===

First an advance example of magic of OT hints:
	ot msg send bob al<TAB>
will auto-complete options:
	alice alex alcapone
In this situation, bash autocomplete with othint program
will query the OT server to list your contacts named al...

With respecting your privacy, trying to use remote server only if
data was not cached, and only asking servers that you trust (the --HT option)
that is the default. Start with "ot --H0" to make sure there will be 0 network
activity, no servers will be asked:
	ot --H0 msg send bob a<TAB>
will auto-complete with data that can be given without causing network traffic.

ot_secure:
If it's more convinient, we might provide separate command: "ot_net", "ot_secure"
with other level of discretion in the hinting process as well with say more
confirmations when also EXECUTING a command that will connect to OT server.
	ot_quiet mint spawn bob silve<TAB>
	1. will NOT ask any server about the list of currenies silve... will use cache
		silvergrams silvertest silverbob {showing only cached data, last update 3h ago}
	2. when the command is finished and executed as
		ot_quiet mint spawn bob silvergrams 1000<ENTER>
	it will ask: "Please confirm do you want to connect NOW to OT server aliased BigTest1,
	with ID=855gusd2dffj2d9uisdfokj233 (unknown/new server), and execute
	mint-spawn command? Type 2 words: 'unknown spawn' to confirm, or 'no'"

Also name alice is in front (instead alphabet sorting) since it was recently/frequently used.

All OT commands will be neatly supported in this way.


=== Commands are in form ===

ot  [front1,front2...]     topic action   var1,...  [varM,...]      [--optNameN[=[optArgN]]...]

ot <-- front options --> <- cCmdname --> <---- arguments ------------------------------->
ot                       <- cmd name --> <-- var --> <-- varExt --> <---- opt ---------->
ot <---- optional -----> <---- mandatory ----------> <---------- optional -------------->
ot <--- cmdFrontOpt ---> <- cmdPart ---> <-------------- cmdArgs ----------------------->

Examples:
ot  --H0              msg   send              bob a
ot                    msg   send              bob alice            --attach scan.jpeg
ot                    msg   send              bob alice carol      --attach scan.jpeg
ot                    msg   send              bob alice carol      -v -v -v
ot  --hint-private    msg   send              bob alice carol      -v -v -v
ot  --hint-cached     msg   send              bob alice carol      -v -v -v
ot  --hint-cached     msg   help

Examples of SYNTAX ERRORS:
ot                    msg                     bob  alice # missing subcommand
ot                    msg   send              bob  # requires at least 2 arguments(*)
ot                    msg   send              bob  alice           --date=now --date=0 # date is unique
ot                    msg   send              bob  --hint-cachead=0 # forward command must be in font

(*) possibly such errors will instead allow execution and have the program interactivly ask for missing mandatory vars.

Therefore the syntax is:
[front-options] 2 words of command name, 0..N mandatory variables, 0..M extra variables, any options

	- subaction will be probably not used but leaving such possibility, then it would be 2..3 words

ARGUMENTS:
	- front-options are special options that must appear in front because they change meaning/parsing
		of everything next - particullary, auto-completion options. Read section [front-options] for details

	- Arguments available depend on the command name.

	- Options for command depend on the command name, as well are imported from global.

	- Options can't be placed before variables!

	- Options can be unique or can repeat. Options can have no value/data,
		or can have one.This gives 2*2 = 4 kinds of options: uniq, uniqData,
		repeat, repeatData.

	- Options can be both global and comming from selected action/subaction.

SEE testcases below in functions

#----------------Errors------------------#
msg     # error: incomplete action
msg send     # error: missing required options
msg send <mynym>     # error: missing required options
#----------------Errors------------------#

[*] - works
[/] - wip

#------List of all included commands-----#
account			# can display active (default) account
*account ls			# list all accounts
*account new			# make new account with UI
*account new <assetName>			# make new account by giving only <assetID>...
*account new <assetName> <accountName>			#... and <accountName>
account refresh			#	refresh database of private accounts' list
account set-default <accountID> # set default account
*account rm <accountName>			# delete account
*account mv <oldAccountName>	<newAccountName>		# rename account
--- Account inbox actions ---
account-in ls			# for active account
account-in ls <accountID>			# for specific <accountID>
account-in accept <paymentID>				#	accept this particular payment
account-in accept --all		# accept all incoming transfers, as well as receipts
--- Account outbox actions ---
account-out ls
------------------------------
asset				# can display active (default) asset - TODO check differences beetween asset and purse
*asset ls		# display all assets
*asset issue # Issue asset for default nym and server
*asset new # add new asset to the wallet
------------------------------
basket new
basket ls
basket exchange
cash send <mynym> <hisnym>
cheque new
contract? new  # Managed by asset new / server new
contract? get <contractID>
contract? sign
------------------------------
market # can't test markets for now
market ls
------------------------------
mint new
------------------------------
*msg			# should show what options do you have with this topic
/msg sendto		# should ask you about nyms ?
msg sendto <hisnym> 		# Send message from default nym to <hisnym>
*msg sendfrom <mynym> <hisnym> message 		# Send message from <mynym> to <hisnym>
msg sendfrom <mynym> <hisnym> --push     	# TODO option "--push" has no sense because msg will be already on the server. Implement msg draft?
msg sendfrom <mynym> <hisnym> --no-footer   # action option
msg sendfrom <mynym> <hisnym> --cc <ccnym>  # action option with value
msg sendfrom <mynym> <hisnym> --cc <ccnym> --cc <ccnym2>
msg sendfrom <mynym> <hisnym> --cc <ccnym> --cc <ccnym2> --push  	 # example of force send (?) - not sure if it will appear
*msg ls			# list all messages for all nyms
/msg ls <mynym> # list all messages for nym
msg mv			# move message to different directory in your mail box
msg rm <index>		# remove message with <index> number for current nym
msg rm --all		# remove all messages from mail box for current nym
*msg rm <nymName> <index> # remove <index> message from mail inbox for <nymName>
msg rm-out <nymName> <index> # proposition for command removing msg from mail outbox
------------------------------
*nym 			# can display active (default) nym
*nym ls			# list of all nyms
nym new			# make new nym with UI (it should ask potential user to give the name
*nym new <nymName>			# make new nym by giving name without UI
nym rm <name>			# remove nym with such <name>
nym rm <nymID>		# remove nym with such <nymID>
*nym info <nymName>		# show information about such <nymName>
*nym info <nymID>		# show information about such <nymID>
nym edit <nymID>		# allows to edit information about such <nymID>
*nym register <nymName>	# register nym defined by nymName on default server
nym register <nymID>	# register nym defined by nymID on default server
/nym register <nymID> <serverID>	# register this specific <nymID> to specific <serverID> server
nym set-default <nymID> # set default nym
*nym import		# import nyms
*nym export		# export nyms to output (outerspace) :) ?, probably bug in OTAPI
*nym check <nymID>			# returns Public Key of this <nymID> nym
*nym refresh			# refresh nym's list and its included informations
nym-cred new 			# change credential to trust?
nym-cred revoke
nym-cred show			# show all credential to trust?
------------------------------
receipt?
------------------------------
server			# can display active (default) server
/server ls			# as above but all servers are listed TODO: Display more information about servers
server add		# add new server contract
server new 	# like newserver
server set-default # set default server
------------------------------
*text encode	# interactively get multiline text
*text encode <text>
text encode <textfile>
*text decode # interactively get multiline text
text decode <textfile>
*text encrypt <recipientNymName> <text>
text encrypt <textfile>
*text decrypt # interactively get multiline text
text decrypt <textfile>
------------------------------
voucher new
wallet? status
#------List of all included commands-----#

That's all commands included to OTHint for now.
(?) means that we're not sure if it will appear in main program, those keywords are implemente but commented for now

------------------------------------------------------------------------
older opentxs commands:

acceptall	acceptinbox	acceptinvoices	acceptmoney
acceptpayments	acceptreceipts	accepttransfers	addasset
addserver	addsignature	balance		buyvoucher
cancel		changepw	nymCheck	clearexpired
clearrecords	confirm		credentials	decode
decrypt		delmail		deloutmail	deposit
discard		editacct	editasset	editnym
editserver	encode		encrypt		exchange
expired		exportcash	exportnym	getboxreceipt
getcontract	getmarkets	getmyoffers	getoffers
importcash	importnym	inbox		issueasset
killoffer	killplan	mail		newacct
newasset	newbasket	newcred		newkey
newnym		newoffer	newserver	outbox
outmail		outpayment	pass_decrypt	pass_encrypt
paydividend	payinvoice	payments	propose
records		refresh		refreshacct	refreshnym
register	revokecred	sendcash	sendcheque
sendinvoice	msgSend		sendvoucher	showaccounts
showacct	showassets	showbasket	showcred
showincoming	showmarkets	showmint	showmyoffers
shownym		shownyms	showoffers	showoutgoing
showpayment	showpurse	showservers	sign
stat		transfer	trigger		verifyreceipt
verifysig	withdraw	writecheque	writeinvoice
------------------------------------------------------------------------

[front-options] usage is for example:
If you type -HN in front of options, then Hints will use Network (-HN) to autocomplete, typing
ot -HN msg send myuser1 bo<TAB> will e.g. ask OT server(s) (e.g. over internet) about you address book
ot -HT msg send myuser1 bo<TAB> the same but for Trusted servers only (will not accidentially talk to other servers)
ot -H0 .... will make sure you will not ask OT servers, just use data cached
ot -HR .... will force othint to refresh all information from servers. Option useful if you want fresh information from servers in real time. Slow and dagerous for privacy.

The exact planned options are 2 settings: accessing remote and accessing cache.
	--hint-remote=V set's the privacy to level 0..9. 0=never ask remote severs for data needed for
	this autocompletion, 9 freely ask (less secure, because remote server see that we compose a command).
	1=local server (e.g. localhost that was marked as trusted)
	3=trusted servers (e.g. several servers you configure as trusted)
	5=uses network (all servers) but might avoid some really sensive data
	9=you fully ask the server owners and consent to possiblity of them (or their ISP, hosting) learning
	what you are planning to do

	--hint-cached=V set's the usage of cached data. 0=revalidate now all data from server.
	5=normal reasonable use of cache
	8=only cached data, unless we have no choice, 9=only cached data even if it causes an error

--hint-remote=0 implies --hint-cached=9 as we are not allowed to touch remote server at all
--hint-cached=0 implied --hints-remote=0 as we are ordering to touch remote server so we are not working in private mode

--hint-remote=0 --hint-cached=0 is disallowed syntax,
even though some commands that indeed do not need neither cached nor remote data could work,
like "ot --hint-remote=0 --hint-cached=0 msg help"
or "ot --hint-remote=0 --hint-cached=0 msg draft"
but for clarity it will be an error because likelly someone confused the options.
But then, --hint-allow-strange option will allow such syntax, if it appears in front of option causing this
contradiction.
E.g. this is allowed syntax:
ot --hint-allow-strange --hint-remote=0 --hint-cached=0 msg draft

Shortcuts:
--H0 gives hints offline        equals --hint-offline     equals --hint-remote=0 --hint-cached=9
--HL gives hints local          equals --hint-local       equals --hint-remote=1 --hint-cached=5
--HT gives hints trusted        equals --hint-trusted     equals --hint-remote=3 --hint-cached=5
--HN gives hints from network   equals --hint-net         equals --hint-remote=5 --hint-cached=5
--HR is forced net reload       equals --hint-reload      equals --hint-remote=9 --hint-cached=0
--HV gives VPNed network        equals --hint-vpn         equals --vpn-all-net --hint-remote=9 --hint-cached=5

VPN:
option --vpn-all-net will force hint autocompletion (and also the actuall commands, unless later
canceled with other options) to use only VPN or similar secure networking. Details will be
configured, it could be e.g. a VPN network, or possibly other secured (private) network facility.
It is guarnateed that if such secure network fails to work, then no network will be touched
and program will not leak any activity to open network (LAN, Internet, etc)
--HV might be most comfortable and yet quite secure option, usable e.g. from hotels.

VPN forced:
Global configuration option could force to always use VPN (append --vpn-all-net)
then use "ot --HN" will not auto-complete on <TAB> but show:
	{can not use --HN because your configuration disabled it, please try --HV}
and if executed as full command, will also refuse to work, with explanation.

Please remember that VPNs or even more advanced solutions are not that secure, and that
ot hint sends anyway lots of data of intended action, with timing correlation, to the OT server
in --HV case.
VPN only hides your IP a bit.
Full caching with --H0 or --HL is most secure, there is no home like localhost :)

*/