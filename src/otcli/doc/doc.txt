

*** If you are a user then start with reading README.txt instead. ***

This file here is primarly for core developers of otcli 
(how ever it could include some information that you can find interesting too).

=== PROGRAM STRUCTURE ===

main() 
-> cOTCli::Run() 
--> shell.runEditline(useOT); - main loop that is a shell that reads commands
---> on ENTER: cCmdParser() - Parse(), Validate(), UseExecute()

---> on TAB: 
----> CompletionReadlineWrapper()
-----> current_completion = gReadlineHandleParser -> StartProcessing (on nr==0)
------> current_completion->UseComplete() + save results (on nr==0)
-----> send back results (on nr==1,2,3...)

TAB-Completion mechanics:
cCmdProcessing::UseComplete() returns vector of strings [will first use Parse + Validate if needed]
strings candidates are built by calling currently-edited-parameter


=== TEST CASE ===

Sending/receiving message
A: ot nym new alice 
A: ot nym new bob
A: ot nym register alice
A: ot nym register bob
S: server: will register this nick as aaa12345 for example
B: ot msg sendfrom bob %aaa12345
S: server: will now store the message
B: ot nym refresh
A: ot msg ls

TODO/bugs:

* need dummy argument to execute:
"ot nym new alice a"

* After adding new nym, nym not always shows in list (shows after restart)

=== IDEAS TO DISCUSS ===

Other format - more readable:
B: ot msg send to alice
B: ot msg send to alice from bob amount 51343 asset xgold1 
B: ot msg sendfrom bob alice

=== GIT BRANCH ===

branch pr-xxx - pull request
branch (non-master) - whatever

rfree/master/ - code should be nice and complile (in future)
*/master/ - usually complile, compile when requesting cool

=== GIT ===

[new] starting new functionality
[ok] code works
[good] code works and completed some small goal or milestone

[doc] documentation change
[git] git organisation change, dirs, .gitignore etc

[bug] known bug
[fix] fixing some bug. Was: [bugfix]

[style] changes to coding style (small refactoring)

...works, a bug was fixed: [bugfix] / [ok]
...works, some functionality was completed: [good] / [ok]

write, ok
write, ok
write, HIDDEN BUG
commit as "[ok] new addressbook" - (hidden bug is there)
write, ok
commit as "[ok] new logo"
discovered bug! Write code to show it, write doc, etc...
commit as "[bug] addressbook segfaults on long name" (reporting founded bug)
write, fixed the bug...
commit as "[fix] address book fixed"

=== COMMON LIBRARIES ===

We define sets of common functions, when used (by #include <lib_common1.hpp>) they include common other libraries.
They also prepare a macro e.g. INJECT_OT_COMMON_USING_NAMESPACE_COMMON_1 that if used will do eg using std::vector
for some parts of the included libraries.
Remember to NOT polute global namespace, i.e. in header files do not use such INJECT... in global namespace { }.

Following sets are defined:
common1 - standard obvious C++(11) features will be included (vector,list,map,iostream,etc); macro uses part of them
common2 - in addition our (of project OT/newcli) general purpose utils
common3 - common external libraries like Open-Transactions

=== CODING STYLE - debug ===

Change cerr<<foo<<bar<<endl; into
_info(foo<<bar)
or as well with either dbg1() info() note() warn() error(). There is also dbg2 and dbg3 that is least significant.

=== CODING STYLE - misc ===

[stringification]
http://gcc.gnu.org/onlinedocs/cpp/Stringification.html

[macro-semicolon-trick]
http://stackoverflow.com/a/163366

TODO probably replace this with even better solution:
http://www.parashift.com/c++-faq/macros-with-multi-stmts.html
"If you have any problems with your compiler's willingness to inline-expand functions containing loops, you can change MYMACRO()'s definition to if (true) {...} else (void)0"



 

